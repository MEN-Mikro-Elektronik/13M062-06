Function Description
====================
Wed Aug 25 13:45:39 WEDT 2004
 
Overview of all Functions
-------------------------

M62_GetEntry           - Initialize drivers jump table 
M62_Init               - Decodes descriptor , allocates and initializes the ll-driver 
M62_Exit               - Deinits HW, disables interrupts, frees allocated memory. 
M62_Read               - Do nothing. 
M62_Write              - Writes 2 bytes to current channel. 
M62_SetStat            - Changes the device state. 
M62_GetStat            - Gets the device state. 
M62_BlockRead          - Do nothing. 
M62_BlockWrite         - Writes all channels maximal 16. Always starts with channel 0. 
M62_Irq                - Do nothing. 
M62_Info               - Get information about hardware and driver requirements. 
 

Function M62_GetEntry()
-----------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        void LL_GetEntry( LL_ENTRY* drvP )
    #else
    # ifdef MAC_BYTESWAP
        void M62_SW_GetEntry( LL_ENTRY* drvP )
    # else
        void M62_GetEntry( LL_ENTRY* drvP )
    # endif
    #endif

Description:
    Initialize drivers jump table

Input:
    ---

Output:
    drvP  pointer to the initialized jump table structure


Function M62_Init()
-------------------

Syntax:
    int32 M62_Init
    (
        DESC_SPEC       *descSpec,
        OSS_HANDLE      *osHdl,
        MACCESS         *ma,
        OSS_SEM_HANDLE  *devSem,
        OSS_IRQ_HANDLE  *irqHdl,
        LL_HANDLE       **llHdlP
    )

Description:
    Decodes descriptor , allocates and initializes the ll-driver
    structure. Initializes the hardware.
    Reads and checks the ID if it is enabled in the descriptor.
    Sets all outputs to 0V, 0mA or 4mA. (depends on HW model)
    The driver supports 16 analog output channels.

    Deskriptor key        Default         Range/Unit
    ------------------------------------------------------------
    DEBUG_LEVEL_DESC      OSS_DBG_DEFAULT see oss_os.h
    DEBUG_LEVEL           OSS_DBG_DEFAULT see oss_os.h

    ID_CHECK              1               0..1    0 - disabled
                                                  1 - enabled

Input:
    descSpec   pointer to descriptor data
    osHdl      oss handle
    ma         hw access handle
    devSem     device semaphore handle
    irqHdl     irq handle

Output:
    llHdlP     ptr to low level driver handle
    return     success (0) or error code


Function M62_Exit()
-------------------

Syntax:
    int32 M62_Exit
    (
        LL_HANDLE **llHdlP
    )

Description:
    Deinits HW, disables interrupts, frees allocated memory.

Input:
    llHdlP    ptr to low level driver handle

Output:
    return    success (0) or error code


Function M62_Read()
-------------------

Syntax:
    int32 M62_Read
    (
        LL_HANDLE   *llHdl,
        int32       ch,
        int32       *valueP
    )

Description:
    Do nothing.

Input:
    llHdl   pointer to low-level driver data structure
    ch      current channel
    valueP  pointer to variable where read value stored

Output:
    *valueP  read value
    return   always ERR_LL_ILL_FUNC


Function M62_Write()
--------------------

Syntax:
    int32 M62_Write
    (
        LL_HANDLE *llHdl,
        int32  ch,
        int32  value
    )

Description:
    Writes 2 bytes to current channel.

    byte structure of value

       bit        15   14..5    4    3..1
               +-----+- - - -+-----+- - -+
    meaning    | msb |       | lsb |  no |
               +-----+- - - -+-----+- - -+

Input:
    llHdl  pointer to low-level driver data structure
    ch     current channel 0..15
    value  output value 12 bit in the left justified word

Output:
    return 0 | error code


Function M62_SetStat()
----------------------

Syntax:
    int32 M62_SetStat
    (
        LL_HANDLE *llHdl,
        int32  code,
        int32  ch,
        INT32_OR_64 value32_or_64
    )

Description:
    Changes the device state.

    common codes            values          meaning
    ---------------------------------------------------------------------
    M_LL_CH_DIR             M_CH_OUT        channel direction (always out)
    
    M_LL_DEBUG_LEVEL        see oss.h       enable/disable debug output

    specific codes          values          meaning
    ---------------------------------------------------------------------
    ---                     ---             ---

Input:
    llHdl                     pointer to low-level driver data structure
    code                      setstat code
    ch                        current channel (ignored for some codes)
    INT32_OR_64 value32_or_64 setstat value or pointer to blocksetstat data

Output:
    return 0 | error code


Function M62_GetStat()
----------------------

Syntax:
    int32 M62_GetStat
    (
        LL_HANDLE *llHdl,
        int32  code,
        int32  ch,
        INT32_OR_64 *value32_or_64P
    )

Description:
    Gets the device state.

    common codes            values          meaning
    ---------------------------------------------------------------------
    M_LL_CH_NUMBER          16              number of channels

    M_LL_CH_DIR             M_CH_OUT        direction of curr ch
                                             always out

    M_LL_CH_LEN             12              channel length in bit

    M_LL_CH_TYP             M_CH_ANALOG     channel type

    M_LL_ID_CHECK           0 or 1          check EEPROM-Id from module

    M_LL_DEBUG_LEVEL        see oss.h       current debug level

    M_LL_ID_SIZE            128             eeprom size [bytes] 

    M_LL_BLK_ID_DATA        -               eeprom raw data         

    M_MK_BLK_REV_ID         pointer to the ident function table
    
    M_BUF_WR_WIDTH          2               channel width [byte]

    M_BUF_WR_MODE           M_BUF_USRCTRL   mode of write buffer
                                            (buffer always controlled by user)

    specific codes          values          meaning
    ---------------------------------------------------------------------
    ---                     ---             ---

Input:
    llHdl          pointer to low-level driver data structure
    code           getstat code
    ch             current channel
    value32_or_64P pointer to variable where value stored or
                   pointer to blockgetstat data

Output:
    *value32_or_64P getstat value or pointer to blockgetstat data
    return          0 | error code


Function M62_BlockRead()
------------------------

Syntax:
    int32 M62_BlockRead
    (
        LL_HANDLE  *llHdl,
        int32     ch,
        void      *buf,
        int32     size,
        int32     *nbrRdBytesP
    )

Description:
    Do nothing.
    Supported modes:  not supported

Input:
    llHdl        pointer to low-level driver data structure
    ch           current channel (always ignored)
    buf          buffer to store read values
    size         must be multiple of buffer width (2)
    nbrRdBytesP  pointer to variable where number of read bytes
                 is stored

Output:
    *nbrRdBytesP number of read bytes
    return       always ERR_LL_ILL_FUNC


Function M62_BlockWrite()
-------------------------

Syntax:
    int32 M62_BlockWrite
    (
        LL_HANDLE *llHdl,
        int32     ch,
        void      *buf,
        int32     size,
        int32     *nbrWrBytesP
    )

Description:
    Writes all channels maximal 16. Always starts with channel 0.
    Supported modes:  M_BUF_USRCTRL         writes to hardware

    buffer structure

       word     0    1..14    15
    (2 byte)  +---+- - - - -+----+
    channel   | 0 |  1..14  | 15 |
              +---+- - - - -+----+

    byte structure of a word

       bit        15   14..5    4    3..1
               +-----+- - - -+-----+- - -+
    meaning    | msb |       | lsb |  no |
               +-----+- - - -+-----+- - -+

Input:
    llHdl  pointer to low-level driver data structure
    ch     current channel (always ignored)
    buf    buffer where output values are stored
    size   number of bytes to write (min. 2, max. 32)
           must be multiple of buffer width (2)

Output:
    nbrWrBytesP  number of written bytes
    return       0 | error code


Function M62_Irq()
------------------

Syntax:
    int32 M62_Irq
    (
        LL_HANDLE *llHdl
    )

Description:
    Do nothing.

Input:
    llHdl  pointer to ll-drv data structure

Output:
    return MDIS_IRQ_DEV_NOT


Function M62_Info()
-------------------

Syntax:
    int32 M62_Info
    (
       int32  infoType,
       ...
    )

Description:
    Get information about hardware and driver requirements.

    Following info codes are supported:

    Code                      Description
    ------------------------  -----------------------------
    LL_INFO_HW_CHARACTER      hardware characteristics
    LL_INFO_ADDRSPACE_COUNT   nr of required address spaces
    LL_INFO_ADDRSPACE         address space information
    LL_INFO_IRQ               interrupt required
    LL_INFO_LOCKMODE          process lock mode required

    The LL_INFO_HW_CHARACTER code returns all address and 
    data modes (OR'ed), which are supported from the
    hardware (MDIS_MAxx, MDIS_MDxx).

    The LL_INFO_ADDRSPACE_COUNT code returns the number
    of address spaces used from the driver.

    The LL_INFO_ADDRSPACE code returns information about one
    specific address space (MDIS_MAxx, MDIS_MDxx). The returned 
    data mode represents the widest hardware access used from 
    the driver.

    The LL_INFO_IRQ code returns, if the driver supports an
    interrupt routine (TRUE or FALSE).

    The LL_INFO_LOCKMODE code returns, which process locking
    mode is required from the driver (LL_LOCK_xxx).

Input:
    infoType     info code
    ...          argument(s)

Output:
    return       success (0) or error code

